@model devarts.Models.Finance

<div class="modal-dialog">
    <div class="modal-content">
        @using (Ajax.BeginForm("EditFinance", "Finance", new AjaxOptions
        {
            InsertionMode = InsertionMode.Replace,
            UpdateTargetId = "patientList",
            LoadingElementId = "loader",
            OnSuccess = "OnEditSuccessOperations()"
        }, new { Id = "editFinanceForm", autocomplete = "off" }))
        {
            @Html.AntiForgeryToken()

            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h3 class="modal-title" id="myModalLabel">
                    <i class="fa fa-bar-chart"></i> Edycja wydatku
                    <small>/ przychodu</small>
                </h3>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-lg-12 form-horizontal">
                        @Html.TextBoxFor(model => model.Id, new { @id = "edit_Id", @class = "form-control hide" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-lg-3" })
                            <div class="col-lg-9">
                                @Html.TextBoxFor(model => model.Name, new { @id = "edit_Name", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Name)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-lg-3" })
                            <div class="col-lg-9">
                                @Html.TextBoxFor(model => model.Description, new { @id = "edit_Description", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Description)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DateFrom, htmlAttributes: new { @class = "control-label col-lg-3" })
                            <div class="col-lg-9">
                                @Html.TextBoxFor(model => model.DateFrom, "{0:yyyy.MM.dd HH:mm}", new { @name = "edit_DateFrom", @id = "edit_DateFrom", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.DateFrom)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DateTo, htmlAttributes: new { @class = "control-label col-lg-3" })
                            <div class="col-lg-9">
                                @Html.TextBoxFor(model => model.DateTo, "{0:yyyy.MM.dd HH:mm}", new { @name = "edit_DateTo", @id = "edit_DateTo", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.DateTo)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Cathegory, new { @style = "font-weight: bold;", @class = "control-label col-lg-3" })
                            <div class="col-lg-9">
                                <div class="input-group">
                                    <span class="input-group-addon"><i class="fa fa-pencil fa" aria-hidden="true"></i></span>
                                    @Html.DropDownListFor(m => Model.Cathegory, new SelectList(@ViewBag.Cathegories, "Value", "Text"), new { @id = "edit_Cathegory", @class = "form-control" })
                                </div>
                                @Html.ValidationMessageFor(model => model.Cathegory)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-lg-3" })
                            <div class="col-lg-9">
                                @{
                                    if (Model != null)
                                    {
                                        var formated = String.Format("{0:0}", Model.Amount);
                                        @Html.TextBoxFor(m => m.Amount, formated, new { @id = "edit_Amount", @class = "form-control" })
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(model => model.Amount, new { @id = "edit_Amount", @class = "form-control", @type = "number", @step = "0.01", @placeholder = "W kwocie użyj przecinku zamiast kropki np. 250,50" })
                                    }
                                }
                                @*@Html.TextBoxFor(model => model.Amount, new { @id = "edit_Amount", @class = "form-control", @type = "number", @step = "0.01", @placeholder = "W kwocie użyj przecinku zamiast kropki np. 250,50" })*@
                                @Html.ValidationMessageFor(model => model.Amount)
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.CurrencyName, new { @style = "font-weight: bold;", @class = "control-label col-lg-3" })
                            <div class="col-lg-9">
                                <div class="input-group">
                                    <span class="input-group-addon"><i class="fa fa-pencil fa" aria-hidden="true"></i></span>
                                    @Html.DropDownListFor(m => Model.CurrencyName, new SelectList(@ViewBag.Currency, "Value", "Text"), new { @id = "edit_CurrencyName", @class = "form-control" })
                                </div>
                                @Html.ValidationMessageFor(model => model.CurrencyName)
                            </div>
                        </div>

                        <div class="col-lg-12">
                            <hr />
                            <div class="col-lg-6 pull-right">
                                @Html.CheckBoxFor(model => model.IsExpense, new { @id = "edit_IsExpense", @class = "big-checkbox" })
                                <b>
                                    @Html.LabelFor(model => model.IsExpense, new { @class = "label-checkbox big-check-box-label" })
                                </b>
                            </div>

                            <div class="col-lg-6 pull-right" style="vertical-align:middle;">
                                @Html.CheckBoxFor(model => model.IncludeFinance, new { @id = "edit_IncudeFinance", @class = "big-checkbox green", @checked = "checked" })
                                <b>
                                    @Html.LabelFor(model => model.IncludeFinance, new { @class = "label-checkbox big-check-box-label", @checked = "checked" })
                                </b>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <div class="row">
                    <div class="col-lg-12">
                        <input class="btn btn-danger" type="submit" value="Zapisz">
                        <a href="#" class="btn btn-default" data-dismiss="modal"><i class="fa fa-close"></i> Zamknij</a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<script>
    $(document).ready(function () {
        $("#DateFrom").datepicker({
            dateFormat: 'yy.mm.dd',
            onSelect: function (datetext) {
                var d = new Date(); // for now

                var h = d.getHours();
                h = (h < 10) ? ("0" + h) : h;

                var m = d.getMinutes();
                m = (m < 10) ? ("0" + m) : m;

                datetext = datetext + " " + h + ":" + m;

                $('#DateFrom').val(datetext);
            }
        });

        $("#DateTo").datepicker({
            dateFormat: 'yy.mm.dd',
            onSelect: function (datetext) {
                var d = new Date(); // for now

                var h = d.getHours();
                h = (h < 10) ? ("0" + h) : h;

                var m = d.getMinutes();
                m = (m < 10) ? ("0" + m) : m;

                datetext = datetext + " " + h + ":" + m;

                $('#DateTo').val(datetext);
            }
        });

        $("#edit_DateFrom").datepicker({
            dateFormat: 'yy.mm.dd',
            onSelect: function (datetext) {
                var d = new Date(); // for now

                var h = d.getHours();
                h = (h < 10) ? ("0" + h) : h;

                var m = d.getMinutes();
                m = (m < 10) ? ("0" + m) : m;

                datetext = datetext + " " + h + ":" + m;

                $('#edit_DateFrom').val(datetext);
            }
        });

        $("#edit_DateTo").datepicker({
            dateFormat: 'yy.mm.dd',
            onSelect: function (datetext) {
                var d = new Date(); // for now

                var h = d.getHours();
                h = (h < 10) ? ("0" + h) : h;

                var m = d.getMinutes();
                m = (m < 10) ? ("0" + m) : m;

                //var s = d.getSeconds();
                //s = (s < 10) ? ("0" + s) : s;

                datetext = datetext + " " + h + ":" + m;/* + ":" + s;*/

                $('#edit_DateTo').val(datetext);
            }
        });
    });   
</script>

<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script type="text/javascript">
    (function ($) {
        $.validator.unobtrusive.adapters.addBool("checkboxrequired", "required");
    }(jQuery));
</script>